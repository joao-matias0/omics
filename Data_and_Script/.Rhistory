# Add gene IDs
results_df$Gene <- rownames(results_df)
# Remove rows with NA values in log2FoldChange or padj
results_df <- results_df[!is.na(results_df$log2FoldChange) & !is.na(results_df$padj), ]
# Categorize genes for coloring
results_df$Category <- "Not significant"  # Default category
results_df$Category[results_df$padj < 0.05 & results_df$log2FoldChange > 0] <- "Upregulated"
results_df$Category[results_df$padj < 0.05 & results_df$log2FoldChange < 0] <- "Downregulated"
# Filter significant genes for labeling (top 30 by |log2FoldChange|)
#top_genes <- results_df %>%
#  filter(Category %in% c("Upregulated", "Downregulated")) %>%
#  arrange(-abs(log2FoldChange)) %>%
#  head(30)
# Filter genes for labeling based on adjusted p-value and log2FoldChange threshold
top_genes <- results_df %>%
filter(Category %in% c("Upregulated", "Downregulated") &
abs(log2FoldChange) > 1 & padj < 0.05)
# Map Ensembl IDs to common gene names (symbols)
common_names <- AnnotationDbi::mapIds(org.Rn.eg.db,
keys = top_genes$Gene,
column = "SYMBOL",
keytype = "ENSEMBL",
multiVals = "first")
# Add common names to the top_genes data frame
top_genes$GeneName <- common_names
# If no common name exists, fall back to Ensembl ID
top_genes$GeneName[is.na(top_genes$GeneName)] <- top_genes$Gene[is.na(top_genes$GeneName)]
# Create the volcano plot
volcano_plot <- ggplot(results_df, aes(x = log2FoldChange, y = -log10(padj), color = Category)) +
geom_point(alpha = 0.8, size = 1.5) +  # Add points
geom_text_repel(data = top_genes,
aes(label = GeneName),
size = 3,
box.padding = 0.5,
point.padding = 0.5) +  # Add labels for top genes
scale_color_manual(values = c("Upregulated" = "red",
"Downregulated" = "blue",
"Not significant" = "gray")) +
theme_minimal() +
labs(title = paste("Volcano Plot:", comparison),
x = "Log2 Fold Change",
y = "-Log10 Adjusted P-Value") +
theme(legend.title = element_blank())
# Save the volcano plot to a file
ggsave(output_file, plot = volcano_plot, width = 8, height = 6, dpi = 300)
# Display the plot
print(volcano_plot)
}
# Step 5: Define comparisons
comparisons <- list(
list(name = "Methylone vs Control", contrast = c("condition", "drug1", "control"), output = "volcano_plot_drug1_vs_control.png"),
list(name = "MDMA vs Control", contrast = c("condition", "drug2", "control"), output = "volcano_plot_drug2_vs_control.png"),
list(name = "Methylone vs MDMA", contrast = c("condition", "drug1", "drug2"), output = "volcano_plot_drug1_vs_drug2.png")
)
# Step 6: Run all comparisons and generate volcano plots
for (comparison in comparisons) {
results_df <- results(dds, contrast = comparison$contrast)
create_volcano_plot(results_df, comparison$name, comparison$output)
}
top_genes <- results_df %>%
filter(Category %in% c("Upregulated", "Downregulated") &
abs(log2FoldChange) > 1 & padj < 0.05)
# Filter significant genes for labeling (top 30 by |log2FoldChange|)
top_genes <- results_df %>%
filter(Category %in% c("Upregulated", "Downregulated")) %>%
arrange(-abs(log2FoldChange)) %>%
head(30)
# Filter significant genes for labeling (top 30 by |log2FoldChange|)
top_genes <- results_df %>%
filter(Category %in% c("Upregulated", "Downregulated")) %>%
arrange(-abs(log2FoldChange)) %>%
head(30)
# Filter significant genes for labeling (top 30 by |log2FoldChange|)
top_genes <- results_df %>%
filter(Category %in% c("Upregulated", "Downregulated")) %>%
arrange(-abs(log2FoldChange)) %>%
head(30)
# Load libraries
library(DESeq2)
library(ggplot2)
library(ggrepel)
library(AnnotationDbi)
library(org.Rn.eg.db)
# Step 1: Load the count table
# Replace with your file path for the count data
count_table <- read.table("filtered_count_table.txt", header = TRUE, sep = "\t", row.names = 1)
# Ensure the count table contains numeric data only
count_table <- as.matrix(count_table)
count_table[count_table < 0] <- 0  # Replace negative values with zeros
# Step 2: Define experimental conditions
# Adjust based on your experiment: first 6 columns are control, next 6 are drug1, last 6 are drug2
conditions <- factor(c(rep("control", 6), rep("drug1", 6), rep("drug2", 6)))
# Create metadata (colData) for DESeq2
colData <- data.frame(condition = conditions, row.names = colnames(count_table))
# Step 3: Create a DESeq2 dataset
dds <- DESeqDataSetFromMatrix(countData = count_table,
colData = colData,
design = ~ condition)
# Step 4: Run differential expression analysis
dds <- DESeq(dds)
# Function to create volcano plots
create_volcano_plot <- function(results_df, comparison, output_file) {
# Convert DESeqResults to data frame
results_df <- as.data.frame(results_df)
# Add gene IDs
results_df$Gene <- rownames(results_df)
# Remove rows with NA values in log2FoldChange or padj
results_df <- results_df[!is.na(results_df$log2FoldChange) & !is.na(results_df$padj), ]
# Categorize genes for coloring
results_df$Category <- "Not significant"  # Default category
results_df$Category[results_df$padj < 0.05 & results_df$log2FoldChange > 0] <- "Upregulated"
results_df$Category[results_df$padj < 0.05 & results_df$log2FoldChange < 0] <- "Downregulated"
# Filter significant genes for labeling (top 30 by |log2FoldChange|)
#top_genes <- results_df %>%
#  filter(Category %in% c("Upregulated", "Downregulated")) %>%
#  arrange(-abs(log2FoldChange)) %>%
#  head(30)
# Filter genes for labeling based on adjusted p-value and log2FoldChange threshold
top_genes <- results_df %>%
filter(Category %in% c("Upregulated", "Downregulated") &
abs(log2FoldChange) > 1 & padj < 0.05)
common_names <- AnnotationDbi::mapIds(org.Rn.eg.db,
keys = top_genes$Gene,
column = "SYMBOL",
keytype = "ENSEMBL",
multiVals = "first")
# Add common names to the top_genes data frame
top_genes$GeneName <- common_names
# If no common name exists, fall back to Ensembl ID
top_genes$GeneName[is.na(top_genes$GeneName)] <- top_genes$Gene[is.na(top_genes$GeneName)]
volcano_plot <- ggplot(results_df, aes(x = log2FoldChange, y = -log10(padj), color = Category)) +
geom_point(alpha = 0.8, size = 1.5) +  # Add points
geom_text_repel(data = top_genes,
aes(label = GeneName),
size = 3,
box.padding = 0.5,
point.padding = 0.5) +  # Add labels for top genes
scale_color_manual(values = c("Upregulated" = "red",
"Downregulated" = "blue",
"Not significant" = "gray")) +
theme_minimal() +
labs(title = paste("Volcano Plot:", comparison),
x = "Log2 Fold Change",
y = "-Log10 Adjusted P-Value") +
theme(legend.title = element_blank())
# Save the volcano plot to a file
ggsave(output_file, plot = volcano_plot, width = 8, height = 6, dpi = 300)
# Display the plot
print(volcano_plot)
library(clusterProfiler)
library(org.Rn.eg.db)
library(enrichplot)
library(dplyr)
# Install required packages if not already installed
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# Uncomment these lines to install missing packages if needed
# BiocManager::install("DESeq2")
# BiocManager::install("ggplot2")
# BiocManager::install("ggrepel")
# BiocManager::install("org.Rn.eg.db")
# Load libraries
library(DESeq2)
library(ggplot2)
library(ggrepel)
library(AnnotationDbi)
library(org.Rn.eg.db)
# Step 1: Load the count table
# Replace with your file path for the count data
count_table <- read.table("filtered_count_table.txt", header = TRUE, sep = "\t", row.names = 1)
# Ensure the count table contains numeric data only
count_table <- as.matrix(count_table)
count_table[count_table < 0] <- 0  # Replace negative values with zeros
# Step 2: Define experimental conditions
# Adjust based on your experiment: first 6 columns are control, next 6 are drug1, last 6 are drug2
conditions <- factor(c(rep("control", 6), rep("drug1", 6), rep("drug2", 6)))
# Create metadata (colData) for DESeq2
colData <- data.frame(condition = conditions, row.names = colnames(count_table))
# Step 3: Create a DESeq2 dataset
dds <- DESeqDataSetFromMatrix(countData = count_table,
colData = colData,
design = ~ condition)
# Step 4: Run differential expression analysis
dds <- DESeq(dds)
# Function to create volcano plots
create_volcano_plot <- function(results_df, comparison, output_file) {
# Convert DESeqResults to data frame
results_df <- as.data.frame(results_df)
# Add gene IDs
results_df$Gene <- rownames(results_df)
# Remove rows with NA values in log2FoldChange or padj
results_df <- results_df[!is.na(results_df$log2FoldChange) & !is.na(results_df$padj), ]
# Categorize genes for coloring
results_df$Category <- "Not significant"  # Default category
results_df$Category[results_df$padj < 0.05 & results_df$log2FoldChange > 0] <- "Upregulated"
results_df$Category[results_df$padj < 0.05 & results_df$log2FoldChange < 0] <- "Downregulated"
# Filter significant genes for labeling (top 30 by |log2FoldChange|)
#top_genes <- results_df %>%
#  filter(Category %in% c("Upregulated", "Downregulated")) %>%
#  arrange(-abs(log2FoldChange)) %>%
#  head(30)
# Filter genes for labeling based on adjusted p-value and log2FoldChange threshold
top_genes <- results_df %>%
filter(Category %in% c("Upregulated", "Downregulated") &
abs(log2FoldChange) > 1 & padj < 0.05)
# Map Ensembl IDs to common gene names (symbols)
common_names <- AnnotationDbi::mapIds(org.Rn.eg.db,
keys = top_genes$Gene,
column = "SYMBOL",
keytype = "ENSEMBL",
multiVals = "first")
# Add common names to the top_genes data frame
top_genes$GeneName <- common_names
# If no common name exists, fall back to Ensembl ID
top_genes$GeneName[is.na(top_genes$GeneName)] <- top_genes$Gene[is.na(top_genes$GeneName)]
# Create the volcano plot
volcano_plot <- ggplot(results_df, aes(x = log2FoldChange, y = -log10(padj), color = Category)) +
geom_point(alpha = 0.8, size = 1.5) +  # Add points
geom_text_repel(data = top_genes,
aes(label = GeneName),
size = 3,
box.padding = 0.5,
point.padding = 0.5) +  # Add labels for top genes
scale_color_manual(values = c("Upregulated" = "red",
"Downregulated" = "blue",
"Not significant" = "gray")) +
theme_minimal() +
labs(title = paste("Volcano Plot:", comparison),
x = "Log2 Fold Change",
y = "-Log10 Adjusted P-Value") +
theme(legend.title = element_blank())
# Save the volcano plot to a file
ggsave(output_file, plot = volcano_plot, width = 8, height = 6, dpi = 300)
# Display the plot
print(volcano_plot)
}
# Step 5: Define comparisons
comparisons <- list(
list(name = "Methylone vs Control", contrast = c("condition", "drug1", "control"), output = "volcano_plot_drug1_vs_control.png"),
list(name = "MDMA vs Control", contrast = c("condition", "drug2", "control"), output = "volcano_plot_drug2_vs_control.png"),
list(name = "Methylone vs MDMA", contrast = c("condition", "drug1", "drug2"), output = "volcano_plot_drug1_vs_drug2.png")
)
# Step 6: Run all comparisons and generate volcano plots
for (comparison in comparisons) {
results_df <- results(dds, contrast = comparison$contrast)
create_volcano_plot(results_df, comparison$name, comparison$output)
}
stop
quit()
library(ggrepel)
library(DESeq2)
library(ggplot2)
library(ggrepel)
library(AnnotationDbi)
library(org.Rn.eg.db)
# Step 1: Load the count table
# Replace with your file path for the count data
count_table <- read.table("filtered_count_table.txt", header = TRUE, sep = "\t", row.names = 1)
# Ensure the count table contains numeric data only
count_table <- as.matrix(count_table)
count_table[count_table < 0] <- 0  # Replace negative values with zeros
# Step 2: Define experimental conditions
# Adjust based on your experiment: first 6 columns are control, next 6 are drug1, last 6 are drug2
conditions <- factor(c(rep("control", 6), rep("drug1", 6), rep("drug2", 6)))
# Create metadata (colData) for DESeq2
colData <- data.frame(condition = conditions, row.names = colnames(count_table))
# Step 3: Create a DESeq2 dataset
dds <- DESeqDataSetFromMatrix(countData = count_table,
colData = colData,
design = ~ condition)
# Step 4: Run differential expression analysis
dds <- DESeq(dds)
# Function to create volcano plots
create_volcano_plot <- function(results_df, comparison, output_file) {
# Convert DESeqResults to data frame
results_df <- as.data.frame(results_df)
# Add gene IDs
results_df$Gene <- rownames(results_df)
# Remove rows with NA values in log2FoldChange or padj
results_df <- results_df[!is.na(results_df$log2FoldChange) & !is.na(results_df$padj), ]
# Categorize genes for coloring
results_df$Category <- "Not significant"  # Default category
results_df$Category[results_df$padj < 0.05 & results_df$log2FoldChange > 0] <- "Upregulated"
results_df$Category[results_df$padj < 0.05 & results_df$log2FoldChange < 0] <- "Downregulated"
# Filter significant genes for labeling (top 30 by |log2FoldChange|)
#top_genes <- results_df %>%
#  filter(Category %in% c("Upregulated", "Downregulated")) %>%
#  arrange(-abs(log2FoldChange)) %>%
#  head(30)
# Filter genes for labeling based on adjusted p-value and log2FoldChange threshold
top_genes <- results_df %>%
filter(Category %in% c("Upregulated", "Downregulated") &
abs(log2FoldChange) > 1 & padj < 0.05)
# Map Ensembl IDs to common gene names (symbols)
common_names <- AnnotationDbi::mapIds(org.Rn.eg.db,
keys = top_genes$Gene,
column = "SYMBOL",
keytype = "ENSEMBL",
multiVals = "first")
# Add common names to the top_genes data frame
top_genes$GeneName <- common_names
# If no common name exists, fall back to Ensembl ID
top_genes$GeneName[is.na(top_genes$GeneName)] <- top_genes$Gene[is.na(top_genes$GeneName)]
# Create the volcano plot
volcano_plot <- ggplot(results_df, aes(x = log2FoldChange, y = -log10(padj), color = Category)) +
geom_point(alpha = 0.8, size = 1.5) +  # Add points
geom_text_repel(data = top_genes,
aes(label = GeneName),
size = 3,
box.padding = 0.5,
point.padding = 0.5) +  # Add labels for top genes
scale_color_manual(values = c("Upregulated" = "red",
"Downregulated" = "blue",
"Not significant" = "gray")) +
theme_minimal() +
labs(title = paste("Volcano Plot:", comparison),
x = "Log2 Fold Change",
y = "-Log10 Adjusted P-Value") +
theme(legend.title = element_blank())
# Save the volcano plot to a file
ggsave(output_file, plot = volcano_plot, width = 8, height = 6, dpi = 300)
# Display the plot
print(volcano_plot)
}
# Step 5: Define comparisons
comparisons <- list(
list(name = "Methylone vs Control", contrast = c("condition", "drug1", "control"), output = "volcano_plot_drug1_vs_control.png"),
list(name = "MDMA vs Control", contrast = c("condition", "drug2", "control"), output = "volcano_plot_drug2_vs_control.png"),
list(name = "Methylone vs MDMA", contrast = c("condition", "drug1", "drug2"), output = "volcano_plot_drug1_vs_drug2.png")
)
# Step 6: Run all comparisons and generate volcano plots
for (comparison in comparisons) {
results_df <- results(dds, contrast = comparison$contrast)
create_volcano_plot(results_df, comparison$name, comparison$output)
}
# Uncomment these lines to install missing packages if needed
# BiocManager::install("DESeq2")
# BiocManager::install("ggplot2")
# BiocManager::install("ggrepel")
# BiocManager::install("org.Rn.eg.db")
# Load libraries
library(DESeq2)
library(ggplot2)
library(ggrepel)
library(AnnotationDbi)
library(org.Rn.eg.db)
# Step 1: Load the count table
# Replace with your file path for the count data
count_table <- read.table("filtered_count_table.txt", header = TRUE, sep = "\t", row.names = 1)
# Ensure the count table contains numeric data only
count_table <- as.matrix(count_table)
count_table[count_table < 0] <- 0  # Replace negative values with zeros
# Step 2: Define experimental conditions
# Adjust based on your experiment: first 6 columns are control, next 6 are drug1, last 6 are drug2
conditions <- factor(c(rep("control", 6), rep("drug1", 6), rep("drug2", 6)))
# Create metadata (colData) for DESeq2
colData <- data.frame(condition = conditions, row.names = colnames(count_table))
# Step 3: Create a DESeq2 dataset
dds <- DESeqDataSetFromMatrix(countData = count_table,
colData = colData,
design = ~ condition)
# Step 4: Run differential expression analysis
dds <- DESeq(dds)
# Function to create volcano plots
create_volcano_plot <- function(results_df, comparison, output_file) {
# Convert DESeqResults to data frame
results_df <- as.data.frame(results_df)
# Add gene IDs
results_df$Gene <- rownames(results_df)
# Remove rows with NA values in log2FoldChange or padj
results_df <- results_df[!is.na(results_df$log2FoldChange) & !is.na(results_df$padj), ]
# Categorize genes for coloring
results_df$Category <- "Not significant"  # Default category
results_df$Category[results_df$padj < 0.05 & results_df$log2FoldChange > 0] <- "Upregulated"
results_df$Category[results_df$padj < 0.05 & results_df$log2FoldChange < 0] <- "Downregulated"
# Filter significant genes for labeling (top 30 by |log2FoldChange|)
#top_genes <- results_df %>%
#  filter(Category %in% c("Upregulated", "Downregulated")) %>%
#  arrange(-abs(log2FoldChange)) %>%
#  head(30)
# Filter genes for labeling based on adjusted p-value and log2FoldChange threshold
# <- results_df %>%
#  filter(Category %in% c("Upregulated", "Downregulated") &
#           abs(log2FoldChange) > 1 & padj < 0.05)
# Map Ensembl IDs to common gene names (symbols)
common_names <- AnnotationDbi::mapIds(org.Rn.eg.db,
keys = top_genes$Gene,
column = "SYMBOL",
keytype = "ENSEMBL",
multiVals = "first")
# Add common names to the top_genes data frame
top_genes$GeneName <- common_names
# If no common name exists, fall back to Ensembl ID
top_genes$GeneName[is.na(top_genes$GeneName)] <- top_genes$Gene[is.na(top_genes$GeneName)]
# Create the volcano plot
volcano_plot <- ggplot(results_df, aes(x = log2FoldChange, y = -log10(padj), color = Category)) +
geom_point(alpha = 0.8, size = 1.5) +  # Add points
geom_text_repel(data = top_genes,
aes(label = GeneName),
size = 3,
box.padding = 0.5,
point.padding = 0.5) +  # Add labels for top genes
scale_color_manual(values = c("Upregulated" = "red",
"Downregulated" = "blue",
"Not significant" = "gray")) +
theme_minimal() +
labs(title = paste("Volcano Plot:", comparison),
x = "Log2 Fold Change",
y = "-Log10 Adjusted P-Value") +
theme(legend.title = element_blank())
# Save the volcano plot to a file
ggsave(output_file, plot = volcano_plot, width = 8, height = 6, dpi = 300)
# Display the plot
print(volcano_plot)
}
# Step 5: Define comparisons
comparisons <- list(
list(name = "Methylone vs Control", contrast = c("condition", "drug1", "control"), output = "volcano_plot_drug1_vs_control.png"),
list(name = "MDMA vs Control", contrast = c("condition", "drug2", "control"), output = "volcano_plot_drug2_vs_control.png"),
list(name = "Methylone vs MDMA", contrast = c("condition", "drug1", "drug2"), output = "volcano_plot_drug1_vs_drug2.png")
)
# Step 6: Run all comparisons and generate volcano plots
for (comparison in comparisons) {
results_df <- results(dds, contrast = comparison$contrast)
create_volcano_plot(results_df, comparison$name, comparison$output)
}
# Load libraries
library(DESeq2)
library(ggplot2)
library(ggrepel)
library(AnnotationDbi)
library(org.Rn.eg.db)
# Step 1: Load the count table
# Replace with your file path for the count data
count_table <- read.table("filtered_count_table.txt", header = TRUE, sep = "\t", row.names = 1)
# Ensure the count table contains numeric data only
count_table <- as.matrix(count_table)
count_table[count_table < 0] <- 0  # Replace negative values with zeros
# Step 2: Define experimental conditions
# Adjust based on your experiment: first 6 columns are control, next 6 are drug1, last 6 are drug2
conditions <- factor(c(rep("control", 6), rep("drug1", 6), rep("drug2", 6)))
# Create metadata (colData) for DESeq2
colData <- data.frame(condition = conditions, row.names = colnames(count_table))
# Step 3: Create a DESeq2 dataset
dds <- DESeqDataSetFromMatrix(countData = count_table,
colData = colData,
design = ~ condition)
# Step 4: Run differential expression analysis
dds <- DESeq(dds)
# Function to create volcano plots
create_volcano_plot <- function(results_df, comparison, output_file) {
# Convert DESeqResults to data frame
results_df <- as.data.frame(results_df)
# Add gene IDs
results_df$Gene <- rownames(results_df)
# Remove rows with NA values in log2FoldChange or padj
results_df <- results_df[!is.na(results_df$log2FoldChange) & !is.na(results_df$padj), ]
# Categorize genes for coloring
results_df$Category <- "Not significant"  # Default category
results_df$Category[results_df$padj < 0.05 & results_df$log2FoldChange > 0] <- "Upregulated"
results_df$Category[results_df$padj < 0.05 & results_df$log2FoldChange < 0] <- "Downregulated"
# Filter significant genes for labeling (top 30 by |log2FoldChange|)
top_genes <- results_df %>%
filter(Category %in% c("Upregulated", "Downregulated")) %>%
arrange(-abs(log2FoldChange)) %>%
head(30)
# Filter genes for labeling based on adjusted p-value and log2FoldChange threshold
# <- results_df %>%
#  filter(Category %in% c("Upregulated", "Downregulated") &
#           abs(log2FoldChange) > 1 & padj < 0.05)
# Map Ensembl IDs to common gene names (symbols)
common_names <- AnnotationDbi::mapIds(org.Rn.eg.db,
keys = top_genes$Gene,
column = "SYMBOL",
keytype = "ENSEMBL",
multiVals = "first")
# Add common names to the top_genes data frame
top_genes$GeneName <- common_names
# If no common name exists, fall back to Ensembl ID
top_genes$GeneName[is.na(top_genes$GeneName)] <- top_genes$Gene[is.na(top_genes$GeneName)]
# Create the volcano plot
volcano_plot <- ggplot(results_df, aes(x = log2FoldChange, y = -log10(padj), color = Category)) +
geom_point(alpha = 0.8, size = 1.5) +  # Add points
geom_text_repel(data = top_genes,
aes(label = GeneName),
size = 3,
box.padding = 0.5,
point.padding = 0.5) +  # Add labels for top genes
scale_color_manual(values = c("Upregulated" = "red",
"Downregulated" = "blue",
"Not significant" = "gray")) +
theme_minimal() +
labs(title = paste("Volcano Plot:", comparison),
x = "Log2 Fold Change",
y = "-Log10 Adjusted P-Value") +
theme(legend.title = element_blank())
# Save the volcano plot to a file
ggsave(output_file, plot = volcano_plot, width = 8, height = 6, dpi = 300)
# Display the plot
print(volcano_plot)
}
# Step 5: Define comparisons
comparisons <- list(
list(name = "Methylone vs Control", contrast = c("condition", "drug1", "control"), output = "volcano_plot_drug1_vs_control.png"),
list(name = "MDMA vs Control", contrast = c("condition", "drug2", "control"), output = "volcano_plot_drug2_vs_control.png"),
list(name = "Methylone vs MDMA", contrast = c("condition", "drug1", "drug2"), output = "volcano_plot_drug1_vs_drug2.png")
)
# Step 6: Run all comparisons and generate volcano plots
for (comparison in comparisons) {
results_df <- results(dds, contrast = comparison$contrast)
create_volcano_plot(results_df, comparison$name, comparison$output)
}
